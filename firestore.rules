/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing public readability of articles with owner-only write access, while leveraging user-specific subcollections for simplified authorization.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles with authorId field for ownership.
 * - /users/{userId}/articles/{articleId}: User-owned articles for simplified authorization.
 * - /authors/{authorId}: Author profiles (likely public read).
 * - /categories/{categoryId}: Article categories (likely public read).
 * - /comments/{commentId}: Comments associated with articles.
 *
 * Key Security Decisions:
 * - Public listing of articles is allowed.
 * - User listing is implicitly disallowed (no rule for `/users`).
 * - Owner-only writes are enforced on articles.
 * - The rules are designed to be as simple and performant as possible, leveraging path-based authorization and denormalized data where appropriate.
 *
 * Denormalization for Authorization:
 * - The `articles` collection includes an `authorId` field to determine ownership without requiring additional reads.
 * - The `articles` document also includes a `members` map to denormalize authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles, but restricts write access to the owner.
     * @path /articles/{articleId}
     * @allow (get, list): if true (public read)
     * @allow (create): if request.auth.uid != null && request.resource.data.authorId == request.auth.uid (only the author can create)
     * @allow (update, delete): if isSignedIn() && resource.data.authorId == request.auth.uid (only the author can update/delete) and resource != null (document must exist)
     * @deny (create, update, delete): if request.auth.uid == null
     * @principle Public Read with Owner-Only Writes.  Denormalizes authorization by requiring an `authorId` field on the document.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to manage their own articles in a private subcollection.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId) && request.resource.data.authorId == userId
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.authorId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to author profiles.
     * @path /authors/{authorId}
     * @allow get, list: if true
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public Read. No write access granted.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow get, list: if true
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public Read. No write access granted.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read and write access to comments.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if false; // Comments should not be updated.
     * @allow delete: if false; // Comments should not be deleted.
     * @principle Allows any signed-in user to create comments but restricts updating and deleting.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}