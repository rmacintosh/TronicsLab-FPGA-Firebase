/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model, balancing public readability with strict ownership and collaborative access controls.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles with owner-only writes.  The `authorId` field within the document determines ownership.
 * - /users/{userId}/articles/{articleId}: Private articles owned by a specific user. Enables simple path-based authorization.
 * - /authors/{authorId}: Public information about authors.
 * - /categories/{categoryId}: Public information about categories.
 * - /comments/{commentId}: Public comments associated with articles.
 *
 * Key Security Decisions:
 * - Public Read Access for Articles and Comments: The /articles and /comments collections are publicly readable to allow for open content consumption.
 * - Owner-Only Writes: Write access to articles is restricted to the author of the article, enforced via the `authorId` field.
 * - User-Scoped Articles: Articles under /users/{userId} are accessible only to the specified user.
 * - No User Listing: Listing of users (authors) is implicitly disallowed, as there are no list rules on the `/authors` collection.
 *
 * Denormalization for Authorization:
 * - Articles store the `authorId` directly within the document, enabling direct ownership checks without additional reads.
 *
 * Structural Segregation:
 * - Private vs. Public Articles: The separation of public articles in `/articles` and private articles in `/users/{userId}/articles` provides a clean way to manage access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read articles, but only the author can create, update, or delete them.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read articles.
     * @allow (create): Only the article author can create. Request must include authorId matching auth.uid.
     * @allow (update, delete): Only the article author can update or delete.
     * @deny (create): A user attempts to create an article with an `authorId` that doesn't match their own `uid`.
     * @deny (update, delete): A user attempts to update or delete an article they don't own.
     * @principle Public Read with Owner-Only Writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own articles.
     * @path /users/{userId}/articles/{articleId}
     * @allow (create, get, list, update, delete): Only the user with matching {userId} can perform these operations.
     * @deny (create, get, list, update, delete): Another user attempts to access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/articles/{articleId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read author information.  Write operations are forbidden.
     * @path /authors/{authorId}
     * @allow (get, list): Any user can read author information.
     * @deny (create, update, delete): No one can create, update, or delete author information through the client.
     * @principle Public Read, No Writes.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read category information. Write operations are forbidden.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No one can create, update, or delete category information through the client.
     * @principle Public Read, No Writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read comments. Write operations are forbidden.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @deny (create, update, delete): No one can create, update, or delete comments.
     * @principle Public Read, No Writes.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows anyone to read subcategories.  Write operations are forbidden.
      * @path /subCategories/{subCategoryId}
      * @allow (get, list): Any user can read subcategories.
      * @deny (create, update, delete): No one can create, update, or delete subcategories through the client.
      * @principle Public Read, No Writes.
      */
     match /subCategories/{subCategoryId} {
       allow get, list: if true;
       allow create, update, delete: if false;
     }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}