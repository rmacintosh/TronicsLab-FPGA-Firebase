rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles and restricts write access to the article's author.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @deny delete: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @principle Public read, owner-only writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Allows the owner to manage their articles in the user-specific subcollection.
     * @path /users/{userId}/articles/{articleId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.authorId == userId;
     * @allow update: if isExistingOwner(userId) && request.data.authorId == userId;
     * @allow delete: if isExistingOwner(userId) && resource.data.authorId == userId;
     * @deny create: if !isOwner(userId) || request.resource.data.authorId != userId;
     * @deny update: if !isExistingOwner(userId) || resource.data.authorId != userId;
     * @deny delete: if !isExistingOwner(userId) || resource.data.authorId != userId;
     * @principle Enforces document ownership, validates relational integrity.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.authorId == request.auth.uid;
      allow delete: if isOwner(userId) && request.resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Allows public read access to author profiles.
     * @path /authors/{authorId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to comments.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Public read, no writes allowed.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(ownerId) {
    return isSignedIn() && resource.data.authorId == request.auth.uid;
  }
}