/**
 * @file Overview
 * This ruleset enforces a multi-layered security model with the following key aspects:
 *
 * Core Philosophy:
 * Strict ownership for user-created content nested under /users/{userId}, combined with public read access for top-level /articles, /categories, and /comments collections, with owner-only writes.
 *
 * Data Structure:
 * The database has a hierarchical structure:
 *   - /articles/{articleId}: Publicly readable articles with authorId for ownership control.
 *   - /users/{userId}/articles/{articleId}: Private articles owned by a specific user.
 *   - /authors/{authorId}: Author profiles (publicly readable).
 *   - /categories/{categoryId}: Article categories (publicly readable).
 *   - /comments/{commentId}: Comments on articles (publicly readable).
 *
 * Key Security Decisions:
 *   - Public read access for /articles, /categories, and /comments to facilitate open content consumption.
 *   - Strict owner-only access for write operations (create, update, delete) on the top-level /articles collection, based on the authorId field.
 *   - Read and write access to /users/{userId}/articles is restricted to the owning user.
 *   - No listing of user documents or private user subcollections is allowed except by the owner.
 *
 * Denormalization for Authorization:
 *   - Articles in the top-level `/articles` collection contain an `authorId` field, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles and restricts write access to the owner.
     * @path /articles/{articleId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow (update, delete): if request.auth != null && isExistingOwner(resource.data.authorId);
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if request.auth == null || request.resource.data.authorId != resource.data.authorId;
     * @principle Allows anyone to read article data, but only the owner can modify or delete it.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows only the owner to read, create, update, and delete their own articles.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId) && request.resource.data.id == userId;
     * @allow (update): if isOwner(userId) && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow (delete): if isOwner(userId) && isExistingOwner(userId);
     * @deny (create, update, delete): if !isOwner(userId);
     * @principle Enforces strict user ownership for data privacy and security.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to author data.
     * @path /authors/{authorId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add more fine-grained access control for author management if required.
     * @principle Allows anyone to read author data. Write operations are denied.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to category data.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add more fine-grained access control for category management if required.
     * @principle Allows anyone to read category data. Write operations are denied.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to comment data.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add more fine-grained access control for comment moderation if required.
     * @principle Allows anyone to read comment data. Write operations are denied.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Prevents unauthorized listing of subcategories.
     * @path /subCategories
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle  Explicitly denies listing subcategories for security.
     */
    match /subCategories {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the existing resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}