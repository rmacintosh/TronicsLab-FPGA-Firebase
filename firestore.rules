/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of public read access,
 *              owner-only write access, and path-based ownership for user-created content.
 *              It prioritizes simplicity and security by denormalizing authorization data
 *              and leveraging structural segregation.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles, secured with owner-only writes.
 *                           The `authorId` field within each document is used to verify ownership.
 * - /users/{userId}/articles/{articleId}: Articles owned by a specific user.
 *                                         Access is restricted to the owning user.
 * - /authors/{authorId}: Publicly readable author profiles.
 * - /categories/{categoryId}: Publicly readable categories.
 * - /comments/{commentId}: Publicly readable comments.
 *
 * Key Security Decisions:
 * - Public read access for top-level collections (articles, authors, categories, comments).
 * - Owner-only write access for articles, enforced via the `authorId` field.
 * - Strict user-ownership for documents under /users/{userId}/... paths.
 * - No user listing is allowed (potential privacy vulnerability).
 *
 * Denormalization for Authorization:
 * - The `articles` documents contain `authorId`, which allows write rules to validate
 *   ownership without additional `get()` operations.
 *
 * Structural Segregation:
 * - Private user articles are stored under /users/{userId}/articles,
 *   while public articles are stored under the top-level /articles collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles, but restricts writes to the owner.
     * @path /articles/{articleId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete): if isSignedIn() && resource.data.authorId == request.auth.uid
     * @deny (create): if request.auth == null
     * @deny (update, delete): if !isSignedIn() || resource.data.authorId != request.auth.uid
     * @principle Public read, owner-only write; validates `authorId` on create/update/delete.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own articles.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId) && request.resource.data.id == userId
     * @allow (update, delete): if isExistingOwner(userId) && request.resource.data.id == resource.data.id
     * @deny (create): if !isOwner(userId) || request.resource.data.id != userId
     * @deny (update, delete): if !isExistingOwner(userId) || request.resource.data.id != resource.data.id
     * @principle Enforces document ownership for all operations; validates user ID on create.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
    }

    /**
     * @description Allows public read access to author profiles.
     * @path /authors/{authorId}
     * @allow (get, list): if true
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete): if true
     * @principle Public read, no writes allowed.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete): if true
     * @principle Public read, no writes allowed.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to comments.
     * @path /comments/{commentId}
     * @allow (get, list): if true
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (create, update, delete): if true
     * @principle Public read, no writes allowed.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Denies all access to the subCategories collection.
     * @path /subCategories
     * @allow get, create, update, delete: if false;
     * @deny get, create, update, delete: if true
     * @principle No access allowed.
     */
    match /subCategories {
      allow get, list, create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}