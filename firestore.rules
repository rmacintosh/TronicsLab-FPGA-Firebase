/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization and clear ownership, using structural segregation
 * and data denormalization to ensure secure and efficient data access. It enforces strict
 * user-based access control, with flexible data schemas to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /articles/{articleId}: Public articles with denormalized authorization data.
 * - /users/{userId}/articles/{articleId}: Private articles owned by a specific user.
 * - /authors/{authorId}: Author profiles.
 * - /categories/{categoryId}: Article categories.
 * - /comments/{commentId}: Comments on articles.
 *
 * Key Security Decisions:
 * - Public Read for Articles: The /articles collection is publicly readable to enable discovery.
 * - Owner-Only Writes: Write access to both /articles and /users/{userId}/articles is strictly limited to the document owner.
 * - Denormalization for Authorization: The `authorId` field in the `/articles` collection facilitates owner-based access control without requiring additional reads. The members map also allows for non-owner authorization.
 * - No User Listing: Listing of users is not permitted to protect user privacy.
 * - Flexible Schemas: Data type validation is minimized to allow for rapid schema iteration during prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to articles and restricts write access to the owner.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @deny delete: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @principle Public read, owner-only writes enforced using the `authorId` field.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants owner-only access to articles within a user's private collection.
     * @path /users/{userId}/articles/{articleId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.authorId == request.auth.uid;
     * @allow delete: if isExistingOwner(userId) && request.resource.data.authorId == request.auth.uid;
     * @deny create: if !isOwner(userId) || request.resource.data.authorId != request.auth.uid;
     * @deny update: if !isExistingOwner(userId) || request.resource.data.authorId != request.auth.uid;
     * @deny delete: if !isExistingOwner(userId) || request.resource.data.authorId != request.auth.uid;
     * @principle Enforces strict user-ownership for private articles.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.authorId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && request.resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Grants public read access to author profiles.
     * @path /authors/{authorId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read-only access for author profiles.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to categories.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read-only access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to comments. Write operations are denied.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read-only access for comments.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Denies all access to the /subCategories collection.
     * @path /subCategories
     * @allow get, list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if true;
     * @deny list: if true;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Explicitly denies all access for security.
     */
    match /subCategories {
        allow get, list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}