/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and public-read-private-write access control patterns.
 * User-generated content is primarily secured by requiring the user to be the owner of the data.
 * Some top-level collections are publicly readable but writable only by authenticated owners.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles, with owner-only writes based on the `authorId` field.
 * - /users/{userId}/articles/{articleId}: Articles owned by a specific user, with access restricted to that user.
 * - /authors/{authorId}: Author profiles, with access restricted to the author.
 * - /categories/{categoryId}: Publicly readable categories. No write rules are defined (implying admin-only write access).
 * - /comments/{commentId}: Publicly readable comments. No write rules are defined (implying admin-only write access).
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under `/users/{userId}/...`.
 * - Listing of users is disallowed.
 * - Top-level `/articles` are publicly readable but only writable by the owner (based on the `authorId` field).
 * - The ruleset does not validate data shapes beyond checking ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * The `articles` documents contain an `authorId` field, allowing for ownership checks without additional reads.
 * The `/users/{userId}/articles` subcollection provides path-based ownership for simplified security rules.
 *
 * Structural Segregation:
 * Private user data is stored under `/users/{userId}/...`, while public data is stored in top-level collections like `/articles`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles and restricts write access to the article's author.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read or list articles.
     * @allow (create): User with UID 'user_abc' can create an article if `request.resource.data.authorId` is 'user_abc'.
     * @allow (update, delete): User with UID 'user_abc' can update/delete an article if the existing `resource.data.authorId` is 'user_abc'.
     * @deny (create): User with UID 'user_xyz' cannot create an article if `request.resource.data.authorId` is 'user_abc'.
     * @deny (update, delete): User with UID 'user_xyz' cannot update/delete an article if the existing `resource.data.authorId` is 'user_abc'.
     * @principle Public Read with Owner-Only Writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to manage their own articles under their user ID.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): User with UID 'user_abc' can read/list articles under /users/user_abc/articles.
     * @allow (create): User with UID 'user_abc' can create an article under /users/user_abc/articles.
     * @allow (update, delete): User with UID 'user_abc' can update/delete an article under /users/user_abc/articles.
     * @deny (get, list): User with UID 'user_xyz' cannot read/list articles under /users/user_abc/articles.
     * @deny (create): User with UID 'user_xyz' cannot create an article under /users/user_abc/articles.
     * @deny (update, delete): User with UID 'user_xyz' cannot update/delete an article under /users/user_abc/articles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/articles/{articleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read access to author profiles. Write access is not explicitly defined.
     * @path /authors/{authorId}
     * @allow (get, list): Any user can read/list author profiles.
     * @deny (create, update, delete): No create, update, or delete is possible, meaning it's only doable via the admin console.
     * @principle Public Read, Admin Write.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to categories. Write access is not explicitly defined.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read/list categories.
     * @deny (create, update, delete): No create, update, or delete is possible, meaning it's only doable via the admin console.
     * @principle Public Read, Admin Write.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to comments. Write access is not explicitly defined.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read/list comments.
     * @deny (create, update, delete): No create, update, or delete is possible, meaning it's only doable via the admin console.
     * @principle Public Read, Admin Write.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read their own user document.
     * @path /users/{userId}
     * @allow (get): User with UID 'user_abc' can read the document at /users/user_abc.
     * @allow (create): User with UID 'user_abc' can create the document at /users/user_abc if they are authenticated.
     * @deny (get): User with UID 'user_xyz' cannot read the document at /users/user_abc.
     * @deny (create): User with UID 'user_xyz' cannot create the document at /users/user_abc.
     * @deny (update, delete): No update or delete allowed.
     * @principle Enforces user-level access control.
     */
     match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}