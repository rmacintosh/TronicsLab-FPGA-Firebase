/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of public read access for some collections and owner-based access control for write operations and user-specific data.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles with owner-restricted writes (ownerId is denormalized on the document).
 * - /users/{userId}/articles/{articleId}: User-owned articles, strictly controlled by the user's ID.
 * - /authors/{authorId}: Publicly readable author profiles.
 * - /categories/{categoryId}: Publicly readable category data.
 * - /comments/{commentId}: Publicly readable comments.
 *
 * Key Security Decisions:
 * - Public Read Access: The /articles, /authors, /categories, and /comments collections are publicly readable to allow for easy data access.
 * - Owner-Only Writes: Write access to /articles is restricted to the owner (author) of the article.  The `authorId` field within the article document is used to enforce this.
 * - User-Scoped Data: Data under /users/{userId} is strictly limited to the authenticated user matching the userId. This pattern ensures that users can only access their own data.
 * - Denormalization for Authorization: The `authorId` field is present on the `Article` entity to allow easy validation of ownership in the rules, avoiding costly `get()` operations.
 * - No User Listing: Listing all users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read articles, but only the author can create, update, or delete them.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read the article.
     * @allow (create): Only the user with the matching `authorId` can create an article.
     * @allow (update, delete): Only the user who is the author (`authorId`) of the existing article can update or delete it.
     * @deny create: if the `authorId` in the request does not match the authenticated user's ID.
     * @deny update, delete: if the authenticated user is not the author of the article.
     * @principle Public read, owner-only writes with authorId validation.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to manage their own articles in their private user space.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): Only the user with the matching `userId` can read the articles.
     * @allow (create): Only the user with the matching `userId` can create an article. The `userId` in the path must match the `id` field in the data.
     * @allow (update, delete): Only the user with the matching `userId` can update or delete their own articles.
     * @deny create: if the `userId` in the path does not match the authenticated user's ID, or if the `id` field in the data does not match the `userId`.
     * @deny update, delete: if the authenticated user is not the owner of the article, or if the document does not exist.
     * @principle Enforces document ownership for all operations within the user's private data space.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read author information.
     * @path /authors/{authorId}
     * @allow (get, list): Any user can read author profiles.
     * @deny create, update, delete: No one can create, update, or delete author profiles.
     * @principle Public read, no write access.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read category information.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny create, update, delete: No one can create, update, or delete categories.
     * @principle Public read, no write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read comments.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @deny create, update, delete: No one can create, update, or delete comments.
     * @principle Public read, no write access.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read subcategories.
     * @path /subCategories/{subCategoryId}
     * @allow (get, list): Any user can read subcategories.
     * @deny create, update, delete: No one can create, update, or delete subcategories.
     * @principle Public read, no write access.
     */
    match /subCategories/{subCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}