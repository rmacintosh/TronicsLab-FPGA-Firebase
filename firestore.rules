/**
 * @description This ruleset enforces a strict user-ownership model for user-created articles,
 *              while allowing public read access to all articles in the `/articles` collection.
 *              Administrative privileges are granted to a specific email address for managing articles and comments.
 * @dataStructure
 *              - Articles are stored in the `/articles` collection and user-specific `/users/{userId}/articles` subcollections.
 *              - Author information is stored in the `/authors` collection.
 *              - Categories are stored in the `/categories` collection.
 *              - Comments are stored in the `/comments` collection.
 * @keySecurityDecisions
 *              - Public read access to `/articles` collection.
 *              - Strict ownership enforced for write operations to `/articles` and `/users/{userId}/articles`.
 *              - Administrative role for rmacintosh@gmail.com to manage content.
 *              - Denormalization of authorization data (`authorId`) into article documents to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return True if the user is signed in, false otherwise.
     * @example isSignedIn() == true
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     * @example isOwner('user123') == true
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     *              This function combines the ownership check with an existence check, ensuring
     *              that the resource exists before proceeding with an update or delete operation.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     * @example isExistingOwner('user123') == true
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return True if the user is an admin, false otherwise.
     * @example isAdmin() == true
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'rmacintosh@gmail.com';
    }

    /**
     * @description Rules for the /articles collection. Allows public read access, but restricts write access to admins or owners.
     * @path /articles/{articleId}
     * @allow (get, list) - Any user can read articles.
     * @allow (create, update, delete) - Only admins or the article owner can modify articles.
     * @deny (create, update, delete) - Non-admins and non-owners cannot modify articles.
     * @principle Public read, owner-only writes with admin override.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && (isAdmin() || resource.data.authorId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || resource.data.authorId == request.auth.uid) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/articles collection. Enforces strict user ownership.
     * @path /users/{userId}/articles/{articleId}
     * @allow (create) - A user can create an article under their own ID.
     * @allow (get, list) - A user can read their own articles.
     * @allow (update, delete) - A user can update or delete their own articles.
     * @deny (create, update, delete) - A user cannot create, update, or delete articles under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/articles/{articleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.authorId == userId;
      allow update: if isExistingOwner(userId) && resource.data.authorId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /authors collection. Allows read access to all, but restricts write access.
     * @path /authors/{authorId}
     * @allow (get, list) - Any user can read author profiles.
     * @deny (create, update, delete) - No one can create, update, or delete author profiles (for now).
     * @principle Public read, no writes allowed.
     */
    match /authors/{authorId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /categories collection. Allows read access to all, but restricts write access.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read category information.
     * @deny (create, update, delete) - No one can create, update, or delete categories (for now).
     * @principle Public read, no writes allowed.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /comments collection. Allows public read access, and restricts write access to admins.
     * @path /comments/{commentId}
     * @allow (get, list) - Any user can read comments.
     * @allow (delete) - Only admins can delete comments.
     * @deny (create, update) - No one can create or update comments via direct document access (comments should be created via backend functions).
     * @principle Public read, admin-only deletion.
     */
    match /comments/{commentId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}