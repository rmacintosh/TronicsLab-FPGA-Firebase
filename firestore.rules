/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a flexible data structure for prototyping while enforcing strict
 * authorization based on user identity and resource ownership. It uses structural segregation
 * and denormalization to achieve secure and performant access control. Data validation is
 * minimized to allow for rapid schema iteration during the prototyping phase.
 *
 * Data Structure:
 * - /articles/{articleId}: Top-level collection for all articles. Publicly readable, but
 *   write access is restricted to the article's author. Includes `authorId` for owner checks.
 * - /users/{userId}/articles/{articleId}: Subcollection of articles owned by a specific user.
 *   Provides a path-based ownership model for simplified security rules.
 * - /authors/{authorId}: Stores author information.
 * - /categories/{categoryId}: Stores category information.
 * - /comments/{commentId}: Stores comments for articles.
 *
 * Key Security Decisions:
 * - Public read access is granted to the `/articles`, `/categories`, and `/comments` collections
 *   to enable open content consumption.
 * - Write access to `/articles` is controlled via the `authorId` field, ensuring only the author
 *   can modify or delete their own articles.
 * - The `/users/{userId}/articles` subcollection enforces strict ownership, allowing only the
 *   authenticated user to create, update, or delete articles within their own user path.
 * - Listing of `/subCategories` is explicitly denied.
 * - Listing of `/users/{userId}` is explicitly denied.
 *
 * Denormalization for Authorization:
 * The `authorId` field is included in the `/articles` documents to enable direct ownership checks
 * without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * The use of both `/articles` and `/users/{userId}/articles` collections allows for a clear
 * separation of public and private article data, simplifying security rules and improving
 * query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read articles, but only the author can create, update, or delete them.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read articles.
     * @allow (create): Only the authenticated user with matching authorId can create an article.
     *   Example: request.auth.uid == "user123" and request.resource.data.authorId == "user123"
     * @allow (update, delete): Only the author of the article can modify or delete it.
     *   Example: request.auth.uid == resource.data.authorId
     * @deny (create): A user attempts to create an article with an authorId that doesn't match their own.
     *   Example: request.auth.uid == "user456" and request.resource.data.authorId == "user123"
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to manage their own articles within their user-specific path.
     * @path /users/{userId}/articles/{articleId}
     * @allow (get, list): Only the authenticated user can read their own articles.
     *   Example: request.auth.uid == userId
     * @allow (create): Only the authenticated user can create an article in their own path, with the userId matching.
     *   Example: request.auth.uid == userId and request.resource.data.id == userId
     * @allow (update, delete): Only the authenticated user can modify or delete articles in their own path.
     *   Example: request.auth.uid == userId
     * @deny (create): A user attempts to create an article in another user's path.
     *   Example: request.auth.uid != userId
     * @principle Enforces strict user ownership for all operations within the user's data tree.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows read access to author information for any user.
     * @path /authors/{authorId}
     * @allow (get, list): Any user can read author information.
     * @allow (create): if false;
     * @allow (update): if false;
     * @allow (delete): if false;
     * @principle Provides public read access for author profiles.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to category information for any user.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @allow (create): if false;
     * @allow (update): if false;
     * @allow (delete): if false;
     * @principle Provides public read access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to comments for any user.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @allow (create): if false;
     * @allow (update): if false;
     * @allow (delete): if false;
     * @principle Provides public read access for comments.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Denies listing of subCategories.
     * @path /subCategories
     * @deny (list): No user can list the documents in this collection.
     * @principle Restricts listing on potentially sensitive data.
     */
    match /subCategories {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts all access to the /users collection except for getting the user's own document.
     * @path /users/{userId}
     * @allow (get): An authenticated user can get their own user document.
     * @allow (list): Listing of users is denied.
     * @allow (create): Creating user documents is denied (handled by auth).
     * @allow (update): Updating user documents is denied.
     * @allow (delete): Deleting user documents is denied.
     * @principle Restricts listing on users collection.
     */
        match /users/{userId} {
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}