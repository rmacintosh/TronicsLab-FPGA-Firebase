/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to shared content.
 *
 * @data_structure
 *  - `/articles/{articleId}`: Public articles with `authorId` for ownership.
 *  - `/users/{userId}/articles/{articleId}`: Private articles owned by a specific user.
 *  - `/authors/{authorId}`: Author profiles (public).
 *  - `/categories/{categoryId}`: Article categories (public).
 *  - `/comments/{commentId}`: Comments on articles (public, but may require moderation in future versions).
 *
 * @key_security_decisions
 *  - User listing is disallowed.
 *  - Articles stored under `/articles/{articleId}` have public read access but owner-only write access.
 *  - Articles stored under `/users/{userId}/articles/{articleId}` are only accessible by the owner.
 *  - Data shape validation is relaxed to allow for rapid prototyping, focusing on authorization.
 *
 * @denormalization_for_authorization
 *  - Articles under `/articles/{articleId}` include an `authorId` field to determine ownership for write operations.
 *  - Articles under `/users/{userId}/articles/{articleId}` implicitly inherit ownership from the path.
 *
 * @structural_segregation
 *  - Public vs. private articles are stored in separate collections (`/articles` vs. `/users/{userId}/articles`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all articles, but restricts write access to the owner of the article.
     * @path /articles/{articleId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete): if request.auth != null && resource.data.authorId == request.auth.uid
     * @deny (create): if request.resource.data.authorId != request.auth.uid
     * @deny (update, delete): if resource == null
     * @deny (create, update, delete): if request.auth == null
     * @principle Allows public read access to articles while enforcing document ownership for write operations.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows only the owner to read, create, update, and delete their own articles.
     * @path /users/{userId}/articles/{articleId}
     * @allow (create, get, update, delete, list): if request.auth.uid == userId
     * @deny (create, get, update, delete, list): if request.auth.uid != userId
     * @principle Restricts access to a user's own data tree, enforcing strict ownership.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update, delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
    }

    /**
     * @description Allows public read access to author profiles.  Write access is forbidden.
     * @path /authors/{authorId}
     * @allow get, list: if true
     * @deny create, update, delete: if true;
     * @principle Allows public access to author profiles.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to categories.  Write access is forbidden.
     * @path /categories/{categoryId}
     * @allow get, list: if true
     * @deny create, update, delete: if true;
     * @principle Allows public access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read and write access to comments. Consider adding moderation in the future.
     * @path /comments/{commentId}
     * @allow get, list, create, update, delete: if true
     * @principle Allows public access to comments.
     */
    match /comments/{commentId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Restricts listing of users.
     * @path /users
     * @deny list: if true
     * @principle Prevents unauthorized listing of user accounts.
     */
     match /users/{userId} {
       allow get: if isOwner(userId);
       allow list: if false;
       allow create: if isOwner(userId);
       allow update: if isExistingOwner(userId);
       allow delete: if false;
     }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}