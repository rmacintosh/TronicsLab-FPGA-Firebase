/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a hybrid security model:
 *   - Articles are publicly readable but owner-writeable (through the /articles collection).
 *   - User-specific articles are strictly owned by the user (through the /users/{userId}/articles collection).
 *   - Categories, Authors, and Comments are publicly accessible.
 *
 * @data_structure
 *   - /articles/{articleId}: Publicly readable articles with an authorId field for ownership.
 *   - /users/{userId}/articles/{articleId}: Articles owned by a specific user, providing path-based ownership.
 *   - /authors/{authorId}: Author information.
 *   - /categories/{categoryId}: Category information.
 *   - /comments/{commentId}: Comments on articles.
 *
 * @key_security_decisions
 *   - Public read access for Articles, Categories, Authors, and Comments.
 *   - Owner-only write access for Articles in the /articles collection, enforced via the authorId field.
 *   - Strict user-ownership for articles under /users/{userId}/articles.
 *   - Denormalization of authorId and categoryId within Article documents for simplified querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles, but restricts writes to the owner.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && resource != null && isOwner(resource.data.authorId);
     * @allow delete: if isSignedIn() && resource != null && isOwner(resource.data.authorId);
     * @deny create: if request.resource.data.authorId != request.auth.uid;
     * @deny update: if !isExistingOwner(resource.data.authorId);
     * @deny delete: if !isExistingOwner(resource.data.authorId);
     * @principle Allows public read access while enforcing owner-only write access for articles, validating the authorId on create.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.authorId);
    }

    /**
     * @description Enforces strict user-ownership for articles under the /users/{userId}/articles collection.
     * @path /users/{userId}/articles/{articleId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isOwner(userId) || request.resource.data.id != resource.data.id;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces that only the owner can read, create, update, or delete their own articles in their user-specific collection, and that the userId in the path matches the authorId in the document.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and write access to authors.
     * @path /authors/{authorId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Publicly accessible collection for author data.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read and write access to categories.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Publicly accessible collection for category data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read and write access to comments.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Publicly accessible collection for comment data.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}