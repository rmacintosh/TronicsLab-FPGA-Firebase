rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles, but restricts writes to the owner.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && isOwnerOfArticle(articleId);
     * @allow delete: if isSignedIn() && isOwnerOfArticle(articleId);
     * @principle Allows public reading, but enforces document ownership for writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/articles/$(articleId)).data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/articles/$(articleId)).data.authorId == request.auth.uid;
    }

    /**
     * @description Enforces ownership for articles nested under a user's document.
     * @path /users/{userId}/articles/{articleId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.authorId == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes, and restricts access to a user's own data tree.
     */
    match /users/{userId}/articles/{articleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows public read access to author profiles. No write restrictions.
     * @path /authors/{authorId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Provides public access to author information.
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read access to categories. No write restrictions.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Provides public access to category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public access to comments. No specific write restrictions.
     * @path /comments/{commentId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Provides public access to comments.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read access to subcategories. No write restrictions.
     * @path /subCategories/{subCategoryId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Provides public access to subcategory information.
     */
    match /subCategories/{subCategoryId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows the owner to read the user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @deny list: if true; // Listing users is not permitted.
     * @allow create: if isOwner(userId);
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle: Enforces that only the owner can read their own user document.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if false; // Listing users is not permitted.
        allow create: if request.auth.uid == userId;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function isOwnerOfArticle(articleId) {
    return get(/databases/$(database)/documents/articles/$(articleId)).data.authorId == request.auth.uid;
  }
}