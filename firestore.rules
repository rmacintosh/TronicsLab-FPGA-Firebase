/**
 * @file Overview
 * This ruleset enforces a combination of ownership-based and public-read/owner-write security models.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles.
 * - /users/{userId}/articles/{articleId}: Articles owned by a specific user.
 * - /authors/{authorId}: Author profiles.
 * - /categories/{categoryId}: Article categories.
 * - /comments/{commentId}: Comments on articles.
 *
 * Key Security Decisions:
 * - Articles in the top-level `/articles` collection are publicly readable but only writable by their owner (identified by the `authorId` field). The authorId is enforced on create, update, and delete.
 * - Articles in the `/users/{userId}/articles` subcollection are only accessible to the owning user.
 * - Listing of `/subCategories` is denied to all users.
 *
 * Denormalization for Authorization:
 * - The `articles` documents have an `authorId` field to enable simple ownership checks.
 *
 * Structural Segregation:
 * - Public articles are stored in the top-level `/articles` collection, while private user-specific articles are stored in the `/users/{userId}/articles` subcollection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles, but restricts writes to the owner.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @deny create: if !isSignedIn() || request.resource.data.authorId != request.auth.uid;
     * @deny update: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @deny delete: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @principle Public read, owner-only write with authorId check for ownership.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows only the owner to read and write articles in their user-specific collection.
     * @path /users/{userId}/articles/{articleId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isOwner(userId) && resource.data.id == userId && resource != null;
     * @allow delete: if isOwner(userId) && resource != null;
     * @deny create: if !isOwner(userId) || request.resource.data.id != userId;
     * @deny update: if !isOwner(userId) || resource.data.id != userId || resource == null;
     * @deny delete: if !isOwner(userId) || resource == null;
     * @principle Enforces document ownership for writes, validates path consistency for userId and articleId.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read and write access to author profiles.
     * @path /authors/{authorId}
     */
    match /authors/{authorId} {
      allow get, list: if true;
      allow create: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow update: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow delete: if false; // Disallowing delete operation.
    }

    /**
     * @description Allows public read and write access to categories.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow update: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow delete: if false; // Disallowing delete operation.
    }

    /**
     * @description Allows public read and write access to comments.
     * @path /comments/{commentId}
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow update: if true; // Allowing open access for prototyping. Consider restricting in production.
      allow delete: if false; // Disallowing delete operation.
    }
    
    /**
     * @description Denies listing of subCategories.
     * @path /subCategories
     * @deny list: Always deny listing subCategories.
     * @principle Denies listing of subCategories.
     */
    match /subCategories {
        allow get, create, update, delete: if false;
        allow list: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(authorId) {
    return isSignedIn() && request.auth.uid == authorId && resource != null;
  }
}