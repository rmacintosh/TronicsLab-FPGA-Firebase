/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for articles, with public read access to the /articles collection and owner-only write access.
 * All user-created articles are stored under /users/{userId}/articles/{articleId} for simplified authorization.
 * Categories and Comments are publicly readable, with no write restrictions, as per prototyping requirements.
 * Authors are publicly readable and writable without restriction.
 *
 * Data Structure:
 * - /articles/{articleId}: Publicly readable articles, owned by an author.
 * - /users/{userId}/articles/{articleId}: Private articles owned by a specific user.
 * - /authors/{authorId}: Author profiles, publicly readable and writable.
 * - /categories/{categoryId}: Categories for organizing articles, publicly readable and writable.
 * - /comments/{commentId}: Comments on articles, publicly readable and writable.
 *
 * Key Security Decisions:
 * - Public read access to /articles allows for open content consumption.
 * - Strict ownership for writes to /articles and /users/{userId}/articles enforces content control.
 * - Authors, Categories, and Comments collections have no write restrictions in the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to articles and restricts write access to the owner.
     * @path /articles/{articleId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
     * @deny create: if request.auth == null;
     * @deny update: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @deny delete: if !isSignedIn() || resource.data.authorId != request.auth.uid || resource == null;
     * @principle Allows public reads, enforces document ownership for writes, and validates the authorId on creation.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own articles.
     * @path /users/{userId}/articles/{articleId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && resource.data.id == userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny create: if !isOwner(userId) || request.resource.data.id != userId;
     * @deny update: if !isExistingOwner(userId) || resource.data.id != userId;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/articles/{articleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and write access to authors.
     * @path /authors/{authorId}
     * @allow get, list, create, update, delete: if true;
     * @principle No access restrictions for prototyping.
     */
    match /authors/{authorId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows public read and write access to categories.
     * @path /categories/{categoryId}
     * @allow get, list, create, update, delete: if true;
     * @principle No access restrictions for prototyping.
     */
    match /categories/{categoryId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows public read and write access to comments.
     * @path /comments/{commentId}
     * @allow get, list, create, update, delete: if true;
     * @principle No access restrictions for prototyping.
     */
    match /comments/{commentId} {
      allow get, list, create, update, delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}